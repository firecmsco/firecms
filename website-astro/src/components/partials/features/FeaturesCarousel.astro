---
import Panel from "../../Panel.astro";
import { defaultBorderMixin } from "../../../migration/partials/styles";

const isDarkTheme = true; // Hardcoded to replicate the behavior of the docusaurus stub

const features = [
    {
        id: 0,
        number: "01",
        title: "Powerful Data Editing",
        description: "Edit your data with both spreadsheet views and detailed forms",
        videoSrc: isDarkTheme ? "/img/editing_demo_dark.mp4" : "/img/editing_demo.mp4"
    },
    {
        id: 1,
        number: "02",
        title: "Notion-style text editor",
        description: "Perfect for creating rich content like articles, blogs, documentation and more",
        videoSrc: "/img/editor_rectangle.mp4"
    },
    {
        id: 2,
        number: "03",
        title: "Custom Views",
        description: "Add dashboards, previews, and more with React components",
        videoSrc: "/img/custom_preview.mp4"
    },
    {
        id: 3,
        number: "04",
        title: "Data Import/Export",
        description: "Export in multiple formats and import from CSV, XLSL, JSON, and more",
        videoSrc: "/img/export_data.mp4"
    }
];
---

<Panel color={"white"}>
    <div class="max-w-6xl mx-auto py-16">
        <div class="grid md:grid-cols-2 gap-16 items-center">
            <div>
                <ul class="space-y-4">
                    {features.map(feature => (
                        <li
                            data-id={feature.id}
                            class:list={[
                                "feature-item flex items-start cursor-pointer transition-all duration-300 p-3 px-4 rounded-lg",
                                feature.id === 0 ? "bg-gray-100" : "hover:bg-gray-50"
                            ]}
                        >
                            <span class:list={[
                                "number-span font-bold mr-2 transition-colors duration-300",
                                feature.id === 0 ? "text-primary" : "text-gray-400"
                            ]}>
                                {feature.number}
                            </span>
                            <div>
                                <h3 class:list={[
                                    "title-h3 font-bold",
                                    feature.id === 0 ? "text-gray-900" : "text-gray-700"
                                ]}>
                                    {feature.title}
                                </h3>
                                <p>{feature.description}</p>
                            </div>
                        </li>
                    ))}
                </ul>
            </div>
            <div class="transition-opacity duration-300">
                {features.map(feature => (
                    <div
                        data-content-id={feature.id}
                        class:list={["feature-content", feature.id !== 0 ? "hidden" : ""]}>
                        <div class="flex items-center justify-center">
                            <video
                                style={{
                                    maxWidth: 540,
                                    aspectRatio: "508 / 589"
                                }}
                                class:list={["aspect-video pointer-events-none rounded-2xl border", defaultBorderMixin]}
                                width="100%"
                                loop
                                autoplay
                                muted>
                                <source
                                    src={feature.videoSrc}
                                    type="video/mp4"/>
                            </video>
                        </div>
                    </div>
                ))}
            </div>
        </div>
    </div>
</Panel>

<script>
    document.addEventListener('astro:page-load', () => {
        let selectedItem = 0;
        let intervalId = null;
        let timeoutId = null;
        const featureItems = document.querySelectorAll('.feature-item');
        const contentItems = document.querySelectorAll('.feature-content');
        const featuresCount = featureItems.length;

        function updateCarousel(newIndex) {
            selectedItem = newIndex;
            featureItems.forEach((item, index) => {
                const numberSpan = item.querySelector('.number-span');
                const titleH3 = item.querySelector('.title-h3');
                if (index === selectedItem) {
                    item.classList.add('bg-gray-100');
                    numberSpan.classList.add('text-primary');
                    numberSpan.classList.remove('text-gray-400');
                    titleH3.classList.add('text-gray-900');
                    titleH3.classList.remove('text-gray-700');
                } else {
                    item.classList.remove('bg-gray-100');
                    numberSpan.classList.remove('text-primary');
                    numberSpan.classList.add('text-gray-400');
                    titleH3.classList.remove('text-gray-900');
                    titleH3.classList.add('text-gray-700');
                }
            });

            contentItems.forEach((content, index) => {
                if (index === selectedItem) {
                    content.classList.remove('hidden');
                } else {
                    content.classList.add('hidden');
                }
            });
        }

        function startAutoplay() {
            if (intervalId) clearInterval(intervalId);
            intervalId = setInterval(() => {
                updateCarousel((selectedItem + 1) % featuresCount);
            }, 6000);
        }

        featureItems.forEach(item => {
            item.addEventListener('click', () => {
                if (intervalId) clearInterval(intervalId);
                if (timeoutId) clearTimeout(timeoutId);

                const newIndex = parseInt(item.getAttribute('data-id'));
                updateCarousel(newIndex);

                timeoutId = setTimeout(startAutoplay, 10000);
            });
        });

        startAutoplay();
    });
</script>