// This file is auto-generated by the FireCMS Drizzle generator. Do not edit manually.

import { primaryKey, pgTable, integer, varchar, boolean, timestamp, jsonb, pgEnum, numeric, serial } from 'drizzle-orm/pg-core';
import { relations as drizzleRelations } from 'drizzle-orm';


export const authors = pgTable("authors", {
    id: serial("id").primaryKey(),
    name: varchar("name").notNull(),
    email: varchar("email").notNull()
});

export const profiles = pgTable("profiles", {
    id: serial("id").primaryKey(),
    bio: varchar("bio"),
    website: varchar("website"),
    author_id: integer("author_id").references(() => authors.id, { onDelete: "set null" })
});

export const posts = pgTable("posts", {
    id: serial("id").primaryKey(),
    title: varchar("title").notNull(),
    content: varchar("content"),
    author_id: integer("author_id").references(() => authors.id, { onDelete: "set null" })
});

export const postsToTags = pgTable("posts_to_tags", {
    posts_id: integer("posts_id").notNull().references(() => posts.id, { onDelete: "cascade" }),
    tags_id: integer("tags_id").notNull().references(() => tags.id, { onDelete: "cascade" }),
}, (table) => ({
    pk: primaryKey({ columns: [table.posts_id, table.tags_id] })
}));

export const tags = pgTable("tags", {
    id: serial("id").primaryKey(),
    name: varchar("name").notNull()
});

export const authorsRelations = drizzleRelations(authors, ({ one, many }) => ({
    profile: one(profiles, {
        fields: [authors.id],
        references: [profiles.author_id],
        relationName: "author"
    }),
    posts: many(posts, { relationName: "author" })
}));

export const profilesRelations = drizzleRelations(profiles, ({ one, many }) => ({
    author: one(authors, {
        fields: [profiles.author_id],
        references: [authors.id],
        relationName: "author"
    })
}));

export const postsRelations = drizzleRelations(posts, ({ one, many }) => ({
    author: one(authors, {
        fields: [posts.author_id],
        references: [authors.id],
        relationName: "author"
    }),
    tags: many(postsToTags, { relationName: "tags" })
}));

export const postsToTagsRelations = drizzleRelations(postsToTags, ({ one, many }) => ({
    posts_id: one(posts, {
        fields: [postsToTags.posts_id],
        references: [posts.id]
    }),
    tags_id: one(tags, {
        fields: [postsToTags.tags_id],
        references: [tags.id]
    })
}));

export const tagsRelations = drizzleRelations(tags, ({ one, many }) => ({
    posts: many(posts, { relationName: "tags" })
}));

export const tables = { authors, profiles, posts, postsToTags, tags };
export const enums = {  };
export const relations = { authorsRelations, profilesRelations, postsRelations, postsToTagsRelations, tagsRelations };

